import { CronJob } from "cron";
//Импортируем class из бибилиотеки "cron"
import dayjs from "dayjs";
//Библиотека для работа с датами. Если в обычном формате вызвать dayjs он будет смотреть на время установленное внутри компьютера.
import utc from "dayjs/plugin/utc";
//Используем для определения time zone внутри APP

import { Token } from "../models/Token.model";

dayjs.extend(utc);
//Для учета нужной нам нулевой  time zonе просто dayjs унаследуем плагин utc. И dayjs булет работать с 0 тайм зоной.

const tokensRemover = async () => {
  const previousMonth = dayjs().utc().subtract(30, "days");
  // В previousMonth получаем значение  даты 1 месяц назат  от теущей даты в 0 тайм зоне.
  console.log(previousMonth.toISOString());
  //Получаем прошлый месяц. При помощи метода toISOString() в обычной строке.$lte - это меньше либо равно.
  await Token.deleteMany({
    createdAt: { $lte: previousMonth },
  });
  //Далее просто вызываем метод от ODM deleteMany и он удалит все токенны которым дольше месяца.
};
//Данная функция будет запускаться каждый раз как только стрельнит установленное время Cron (Время устанавливаеться в спец формате.)
//Реализация функции может быть любой.
//Что конкретно означает значение которые мы подставляе вместо звездочек("* * * * * *", tokensRemover); Можно узнать на сайте Cronguru.
//Также дополнительно как аргумент для настройки Cron можно передать ** timezone **  которой можно выставлять тайм зонны. По дефолту стоит UTC

export const removeOldTokens = new CronJob("* * * * * *", tokensRemover);
//Функцию которая должна срабатывать передаем вторым параметром в class CronJob

//("* * * * * *", tokensRemover)

//Перед всеми символами можно использовать еще одну * это будут секунды.
//1 символ это минуты
//2 символ это чассы
//3 символ это дни месяца
//4 символ это месяцы
//5 символ это дни недели

//Пример 5 0 * 8 *
//5 минуту 0 чассов каждый день месяца 8 месяца любого дня недели будет срабатывать Cron

//Пример 5-5 * * * *
//Каждую минуту с 5 по 10 минуту.

//* * * * * *
//Cron будет отрабатывать каждую секунду.
